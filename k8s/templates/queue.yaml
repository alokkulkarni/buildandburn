apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.name }}-auth
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  RABBITMQ_DEFAULT_USER: {{ .Values.queue.user | b64enc | default "guest" }}
  RABBITMQ_DEFAULT_PASS: {{ .Values.queue.password | b64enc }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.name }}-data
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.queue.storage | default "1Gi" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  serviceName: {{ .Values.name }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      containers:
      - name: {{ .Values.name }}
        image: {{ .Values.queue.image | default "rabbitmq:3.9-management" }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: http
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-auth
              key: RABBITMQ_DEFAULT_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-auth
              key: RABBITMQ_DEFAULT_PASS
        volumeMounts:
        - name: data
          mountPath: /var/lib/rabbitmq
        resources:
          requests:
            cpu: {{ .Values.queue.resources.requests.cpu | default "100m" }}
            memory: {{ .Values.queue.resources.requests.memory | default "256Mi" }}
          limits:
            cpu: {{ .Values.queue.resources.limits.cpu | default "500m" }}
            memory: {{ .Values.queue.resources.limits.memory | default "512Mi" }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.name }}-data
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  ports:
  - port: 5672
    targetPort: 5672
    name: amqp
  - port: 15672
    targetPort: 15672
    name: http
  selector:
    app: {{ .Values.name }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.name }}-management
  namespace: {{ .Values.namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: {{ .Values.name }}.{{ .Values.ingress.domain }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Values.name }}
            port:
              number: 15672 